{"version":3,"sources":["../../../src/client/components/nearest-station.jsx"],"names":[],"mappings":"AAAA;;AAEA,IAAM,QAAQ,QAAQ,OAAR,CAAd;AACA,IAAM,cAAc,QAAQ,qBAAR,CAApB;;AAEA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C;;AACxC,MAAI,IAAI,oBAAR,C;AACA,MAAI,IAAI,KAAK,GAAb;AACA,MAAI,IAAI,MAAM,EAAE,CAAC,OAAO,IAAR,IAAgB,CAAlB,IAAqB,CAA3B,GACN,EAAE,OAAO,CAAT,IAAc,EAAE,OAAO,CAAT,CAAd,IACC,IAAI,EAAE,CAAC,OAAO,IAAR,IAAgB,CAAlB,CADL,IAC2B,CAF7B;;AAIA,SAAO,QAAQ,KAAK,IAAL,CAAU,KAAK,IAAL,CAAU,CAAV,CAAV,CAAf,C;AACD;;AAED,IAAM,iBAAiB,MAAM,WAAN,CAAkB;AACvC,eAAa,gBAD0B;;AAGvC,iBAHuC,6BAGrB;AAAA;;AAChB,QAAI,YAAY,OAAO,SAAvB;AACA,QAAI,aAAa,UAAU,WAA3B,EAAwC;AAAA;AACtC,YAAI,YAAJ;AACA,kBAAU,WAAV,CAAsB,kBAAtB,CAAyC,UAAU,GAAV,EAAe;AACtD,cAAI,YAAY,YAAY,GAAZ,CAAgB;AAAA,mBAC9B,SAAS,IAAI,MAAJ,CAAW,QAApB,EAA8B,IAAI,MAAJ,CAAW,SAAzC,EAAoD,QAAQ,QAA5D,EAAsE,QAAQ,SAA9E,CAD8B;AAAA,WAAhB,CAAhB;AAEA,cAAI,WAAW,QAAf;AACA,cAAI,WAAW,CAAf;AACA,eAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,UAAU,MAA7B,EAAqC,GAArC,EAA0C;AACxC,gBAAI,WAAW,UAAU,CAAV,CAAf,EACA;AACE,yBAAW,CAAX;AACA,yBAAW,UAAU,CAAV,CAAX;AACD;AACF;AACD,eAAK,QAAL,CAAc;AACZ,yBAAa,YAAY,QAAZ,EAAsB,OADvB;AAEZ,yBAAa,YAAY,QAAZ,EAAsB,IAFvB;AAGZ,sBAAU,KAAK,KAAL,CAAW,UAAU,QAAV,CAAX,CAHE,EAAd;AAID,SAhBD;AAFsC;AAqBvC;AACD,WAAO,EAAP;AACD,GA5BsC;AA8BvC,QA9BuC,oBA8B9B;AACP,QAAI,UAAU;AAAA;MAAA;MAAA;MAAoB;AAAA;QAAA,EAAG,MAAM,KAAK,KAAL,CAAW,WAApB;QAAkC,KAAK,KAAL,CAAW;AAA7C,OAApB;MAAA;MAAmF,KAAK,KAAL,CAAW,QAA9F;MAAA;AAAA,KAAd;AACA,WACE;AAAA;MAAA;MACG,KAAK,KAAL,CAAW,WAAX,GAAyB,OAAzB,GAAmC;AADtC,KADF;AAID;AApCsC,CAAlB,CAAvB;;AAuCA,OAAO,OAAP,GAAiB,cAAjB","file":"nearest-station.js","sourcesContent":["'use strict';\n\nconst React = require('react');\nconst StationList = require('../lib/station-list');\n\nfunction distance(lat1, lon1, lat2, lon2) { // See http://stackoverflow.com/a/21623206/1575281\n  var p = 0.017453292519943295;    // Math.PI / 180\n  var c = Math.cos;\n  var a = 0.5 - c((lat2 - lat1) * p)/2 +\n    c(lat1 * p) * c(lat2 * p) *\n    (1 - c((lon2 - lon1) * p))/2;\n\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n}\n\nconst NearestStation = React.createClass({\n  displayName: 'NearestStation',\n\n  getInitialState() {\n    let navigator = global.navigator;\n    if (navigator && navigator.geolocation) {\n      let self = this;\n      navigator.geolocation.getCurrentPosition(function (pos) {\n        var distances = StationList.map(station =>\n          distance(pos.coords.latitude, pos.coords.longitude, station.latitude, station.longitude));\n        var minValue = Infinity;\n        var minIndex = 0;\n        for(let i = 0; i < distances.length; i++) {\n          if (minValue > distances[i])\n          {\n            minIndex = i;\n            minValue = distances[i];\n          }\n        }\n        self.setState({\n          nearestCode: StationList[minIndex].crsCode,\n          nearestName: StationList[minIndex].name,\n          distance: Math.round(distances[minIndex]) });\n      });\n\n\n    }\n    return { };\n  },\n\n  render() {\n    let nearest = <p>Nearest station: <a href={this.state.nearestCode}>{this.state.nearestName}</a> {this.state.distance} km</p>;\n    return (\n      <div>\n        {this.state.nearestCode ? nearest : 'Finding nearest station...'}\n      </div>);\n  }\n});\n\nmodule.exports = NearestStation;\n"]}