{"version":3,"sources":["../../../../src/server/plugins/logic/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst DecisionTree = require('decision-tree');\n\nvar registerPlugin = (server, options, next) => {\n\n  const logicTree = [{\n    location: 'train',\n    interaction: 'staff',\n    type: 'behaviour',\n    sentiment: 'positive',\n    tweet: 'I\\'ve had a great experience with a staff member on your train today'\n  }, {\n    location: 'train',\n    interaction: 'staff',\n    type: 'behaviour',\n    sentiment: 'negative',\n    tweet: 'I\\'ve had a bad experience with a staff member on your train today'\n  }, {\n    location: 'train',\n    interaction: 'staff',\n    type: 'knowledge',\n    sentiment: 'positive',\n    tweet: 'Your staff provided me with assistance on the train today'\n  }, {\n    location: 'train',\n    interaction: 'staff',\n    type: 'knowledge',\n    sentiment: 'negative',\n    tweet: 'Your staff were not able to tell me what I needed on the train today'\n  }, {\n    location: 'train',\n    interaction: 'staff',\n    type: 'availability',\n    sentiment: 'positive',\n    tweet: 'Plenty of staff available on your trains today'\n  }, {\n    location: 'train',\n    interaction: 'staff',\n    type: 'availability',\n    sentiment: 'negative',\n    tweet: 'There were no members of staff available on your trains today'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'cleanliness',\n    sentiment: 'positive',\n    tweet: 'The facilities on your trains are very clean'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'cleanliness',\n    sentiment: 'negative',\n    tweet: 'The facilities on your trains are very dirty and need cleaning'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'comfort',\n    sentiment: 'positive',\n    tweet: 'The facilities on your trains are very comfortable'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'comfort',\n    sentiment: 'negative',\n    tweet: 'The facilities on your trains are very uncomfortable'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'damage',\n    sentiment: 'positive',\n    tweet: 'The facilities on your trains are in great condition'\n  }, {\n    location: 'train',\n    interaction: 'facilities',\n    type: 'damage',\n    sentiment: 'negative',\n    tweet: 'The facilities on your trains are broken'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'behaviour',\n    sentiment: 'positive',\n    tweet: 'I\\'ve had a great experience with a staff member at your station today'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'behaviour',\n    sentiment: 'negative',\n    tweet: 'I\\'ve had a bad experience with a staff member at your station today'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'knowledge',\n    sentiment: 'positive',\n    tweet: 'Your staff provided me with assistance on the station today'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'knowledge',\n    sentiment: 'negative',\n    tweet: 'Your staff were not able to provided me with assistance on the station today'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'availability',\n    sentiment: 'positive',\n    tweet: 'Plenty of staff available on your station today'\n  }, {\n    location: 'station',\n    interaction: 'staff',\n    type: 'availability',\n    sentiment: 'negative',\n    tweet: 'There were no members of staff available on your station today'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'cleanliness',\n    sentiment: 'positive',\n    tweet: 'The facilities in the station are very clean'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'cleanliness',\n    sentiment: 'negative',\n    tweet: 'The facilities in the station are very dirty and need cleaned'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'comfort',\n    sentiment: 'positive',\n    tweet: 'The facilities in the station are very comfortable'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'comfort',\n    sentiment: 'negative',\n    tweet: 'The facilities in the station are uncomfortable'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'damage',\n    sentiment: 'positive',\n    tweet: 'The facilities on your trains are in great condition'\n  }, {\n    location: 'station',\n    interaction: 'facilities',\n    type: 'damage',\n    sentiment: 'negative',\n    tweet: 'The facilities on your trains are damaged'\n  }];\n\n  const decide = new DecisionTree(logicTree, 'tweet', ['location', 'interaction', 'type', 'sentiment']);\n\n  server.method({\n    name: 'decideTweet',\n    method: (options) => {\n      return new Promise((resolve, reject) => {\n        let result;\n        try {\n          result = decide.predict(options);\n        } catch (e) {\n          return reject(e)\n        }\n        return resolve(result);\n      });\n    }\n  });\n\n  server.route({\n    method: 'POST',\n    path: '/get-tweet',\n    handler: (req, reply) => {\n      server.methods.decideTweet(req.payload).then((tweet) => {\n        reply({ tweet: tweet});\n      }, reply);\n    }\n  });\n\n  return next();\n};\n\nregisterPlugin.attributes = {\n  name: 'logic',\n  version: '1.0.0',\n  dependencies: []\n};\n\nmodule.exports = registerPlugin;\n"]}