{"version":3,"sources":["../../../../../src/server/plugins/logic/test/logic.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,MAAM,QAAQ,KAAR,CAAZ;;AAEA,IAAM,QAAQ,QAAQ,OAAR,CAAd;;AAEA,IAAM,MAAM,QAAQ,GAAR,GAAc,IAAI,MAAJ,EAA1B;;AAEA,IAAI,UAAJ,CAAe,YAAf,EAA6B,YAAM;;AAEjC,MAAI,eAAJ;;AAEA,MAAI,UAAJ,CAAe,UAAC,IAAD,EAAU;;AAEvB,aAAS,IAAI,KAAK,MAAT,EAAT;AACA,WAAO,UAAP;;AAEA,WAAO,QAAP,CAAgB,CAAC;AACf,gBAAU;AADK,KAAD,CAAhB,EAEI,UAAC,KAAD,EAAW;AACb,UAAI,KAAJ,EAAW;AAAE,aAAK,KAAL;AAAc;AAC3B,aAAO,KAAP,CAAa,UAAC,KAAD,EAAW;AACtB,YAAI,KAAJ,EAAW;AAAE,eAAK,KAAL;AAAc;AAC3B;AACD,OAHD;AAID,KARD;AASD,GAdD;;AAgBA,MAAI,SAAJ,CAAc,UAAC,IAAD,EAAU;AACtB,aAAS,SAAT;AACA;AACD,GAHD;;AAKA,MAAI,IAAJ,CAAS,4CAAT,EAAuD,UAAC,IAAD,EAAU;;AAE/D,QAAM,YAAY;AAChB,gBAAU,OADM;AAEhB,mBAAa,OAFG;AAGhB,YAAM,WAHU;AAIhB,iBAAW;AAJK,KAAlB;;AAOA,WAAO,OAAP,CAAe,WAAf,CAA2B,SAA3B,EAAsC,IAAtC,CAA2C,UAAC,MAAD,EAAY;AACrD,WAAK,MAAL,CAAY,MAAZ,EAAoB,EAApB,CAAuB,KAAvB,CAA6B,sEAA7B;AACA;AACD,KAHD,EAGG,IAHH;AAKD,GAdD;;AAgBA,MAAI,IAAJ,CAAS,8CAAT,EAAyD,UAAC,IAAD,EAAU;;AAEjE,QAAM,YAAY;AAChB,gBAAU,SADM;AAEhB,mBAAa,OAFG;AAGhB,YAAM,WAHU;AAIhB,iBAAW;AAJK,KAAlB;;AAOA,WAAO,OAAP,CAAe,WAAf,CAA2B,SAA3B,EAAsC,IAAtC,CAA2C,UAAC,MAAD,EAAY;AACrD,WAAK,MAAL,CAAY,MAAZ,EAAoB,EAApB,CAAuB,KAAvB,CAA6B,wEAA7B;AACA;AACD,KAHD,EAGG,IAHH;AAKD,GAdD;;AAgBA,MAAI,IAAJ,CAAS,iCAAT,EAA4C,UAAC,IAAD,EAAU;AACpD,QAAM,YAAY;AAChB,gBAAU,KADM;AAEhB,mBAAa,KAFG;AAGhB,YAAM,KAHU;AAIhB,iBAAW;AAJK,KAAlB;;AAOA,WAAO,OAAP,CAAe,WAAf,CAA2B,SAA3B,EAAsC,IAAtC,CAA2C,UAAC,MAAD,EAAY;;AAEtD,KAFD,EAEG,UAAC,KAAD,EAAW;AACZ,WAAK,MAAL,CAAY,KAAZ,EAAmB,EAAnB,CAAsB,EAAtB,CAAyB,EAAzB,CAA4B,UAA5B,CAAuC,KAAvC;AACA;AACD,KALD;AAMD,GAdD;AAgBD,CAzED","file":"logic.spec.js","sourcesContent":["'use strict';\n\nconst Hapi = require('hapi');\nconst Code = require('code');\nconst Lab = require('lab');\n\nconst logic = require('./../');\n\nconst lab = exports.lab = Lab.script();\n\nlab.experiment('Logic tree', () => {\n\n  let server;\n\n  lab.beforeEach((done) => {\n\n    server = new Hapi.Server();\n    server.connection();\n\n    server.register([{\n      register: logic\n    }], (error) => {\n      if (error) { done(error); }\n      server.start((error) => {\n        if (error) { done(error); }\n        done();\n      })\n    });\n  });\n\n  lab.afterEach((done) => {\n    server = undefined;\n    done();\n  });\n\n  lab.test('returns expected tweet for logic for train', (done) => {\n\n    const logicPath = {\n      location: 'train',\n      interaction: 'staff',\n      type: 'behaviour',\n      sentiment: 'positive'\n    };\n\n    server.methods.decideTweet(logicPath).then((result) => {\n      Code.expect(result).to.equal('I\\'ve had a great experience with a staff member on your train today');\n      done();\n    }, done)\n\n  });\n\n  lab.test('returns expected tweet for logic for station', (done) => {\n\n    const logicPath = {\n      location: 'station',\n      interaction: 'staff',\n      type: 'behaviour',\n      sentiment: 'positive'\n    };\n\n    server.methods.decideTweet(logicPath).then((result) => {\n      Code.expect(result).to.equal('I\\'ve had a great experience with a staff member at your station today');\n      done();\n    }, done)\n\n  });\n\n  lab.test('returns error if logic is wrong', (done) => {\n    const logicPath = {\n      location: 'foo',\n      interaction: 'bar',\n      type: 'baz',\n      sentiment: 'bing'\n    };\n\n    server.methods.decideTweet(logicPath).then((result) => {\n      // Should not take this path\n    }, (error) => {\n      Code.expect(error).to.be.an.instanceOf(Error);\n      done();\n    })\n  })\n\n});\n"]}