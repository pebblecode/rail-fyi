{"version":3,"sources":["../../../../src/server/plugins/login/index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,iBAAiB,SAAjB,cAAiB,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAA2B;;AAEhD,SAAO,QAAP,CAAgB,CAAC;AACf,cAAU,QAAQ,MAAR;AADK,GAAD,EAEb;AACD,cAAU,QAAQ,kBAAR;AADT,GAFa,CAAhB,EAII,UAAC,KAAD,EAAW;AACb,QAAI,KAAJ,EAAW;AACT,aAAO,KAAK,KAAL,CAAP;AACD;;AAED,WAAO,IAAP,CAAY,QAAZ,CAAqB,SAArB,EAAgC,QAAhC,EAA0C,KAA1C,EAAiD;AAC/C,cAAQ,KADuC;AAE/C,gBAAU,4BAFqC;AAG/C,gBAAU;AAHqC,KAAjD;;AAMA,QAAM,WAAW,OAAO,MAAP,CAAc,EAAd,EAAkB,EAAE,UAAU,SAAZ,EAAlB,EAA2C,QAAQ,OAAnD,CAAjB;;AAEA,WAAO,IAAP,CAAY,QAAZ,CAAqB,SAArB,EAAgC,MAAhC,EAAwC,QAAxC;;;;AAIA,WAAO,KAAP,CAAa;AACX,cAAQ,CAAC,KAAD,EAAQ,MAAR,CADG,E;AAEX,YAAM,QAFK,E;AAGX,cAAQ;AACN,cAAM;AADA,OAHG;AAMX,eAAS,iBAAC,OAAD,EAAU,KAAV,EAAoB;AAC3B,YAAI,CAAC,QAAQ,IAAR,CAAa,eAAlB,EAAmC;AACjC,iBAAO,MAAM,mCAAmC,QAAQ,IAAR,CAAa,KAAb,CAAmB,OAA5D,CAAP;AACD;;AAED,cAAM,KAAN,CAAY,aAAZ,EAA2B,QAAQ,IAAR,CAAa,WAAb,CAAyB,OAApD;;;;;;;;AAQA,eAAO,MAAM,QAAN,CAAe,GAAf,CAAP;AACD;AApBU,KAAb;;AAuBA,WAAO,MAAP;AACD,GA7CD;AA8CD,CAhDD;;AAkDA,eAAe,UAAf,GAA4B;AAC1B,QAAM,OADoB;AAE1B,WAAS,OAFiB;AAG1B,gBAAc;AAHY,CAA5B;;AAMA,OAAO,OAAP,GAAiB,cAAjB","file":"index.js","sourcesContent":["'use strict';\n\nconst registerPlugin = (server, options, next) => {\n\n  server.register([{\n    register: require('bell')\n  }, {\n    register: require('hapi-auth-cookie')\n  }], (error) => {\n    if (error) {\n      return next(error);\n    }\n\n    server.auth.strategy('session', 'cookie', 'try', {\n      cookie: 'sid',\n      password: 'cookie_encryption_password',\n      isSecure: false\n    });\n\n    const settings = Object.assign({}, { provider: 'twitter' }, options.twitter);\n\n    server.auth.strategy('twitter', 'bell', settings);\n\n    //console.log(server.connections[0].states);\n\n    server.route({\n      method: ['GET', 'POST'], // Must handle both GET and POST\n      path: '/login',          // The callback endpoint registered with the provider\n      config: {\n        auth: 'twitter'\n      },\n      handler: (request, reply) => {\n        if (!request.auth.isAuthenticated) {\n          return reply('Authentication failed due to: ' + request.auth.error.message);\n        }\n\n        reply.state('user-cookie', request.auth.credentials.profile);\n\n        //request.auth.session.set(request.auth.credentials.profile);\n\n        // Perform any account lookup or registration, setup local session,\n        // and redirect to the application. The third-party credentials are\n        // stored in request.auth.credentials. Any query parameters from\n        // the initial request are passed back via request.auth.credentials.query.\n        return reply.redirect('/');\n      }\n    });\n\n    return next();\n  });\n};\n\nregisterPlugin.attributes = {\n  name: 'login',\n  version: '1.0.0',\n  dependencies: []\n};\n\nmodule.exports = registerPlugin;\n"]}